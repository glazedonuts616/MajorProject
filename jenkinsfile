pipeline
{
    agent any

    environment {
        AWS_REGION = 'us-east-1' // e.g., us-east-1
        EKS_CLUSTER_NAME = 'my-terra-cluster'
        DOCKER_IMAGE_NAME = 'shashkist/flask-contacts-app'
        REPO_URL = 'https://github.com/glazedonuts616/MajorProject.git' // e.g., https://github.com/your-org/your-repo.git
    }

    stages {
        
        stage ('Clone Github Repository'){
            steps{
               git branch: 'main', credentialsId: 'github', url: 'https://github.com/glazedonuts616/MajorProject.git'
               echo 'This is a debug message #1'
            }
        }
        // stage('Build Docker Image') {
        //     steps {
        //         script {
        //             dockerImage = docker.build(env.DOCKER_IMAGE_NAME)
        //         }
        //     }
        // }

        // stage('Push Docker Image') {
        //     steps {
        //         withDockerRegistry([credentialsId: env.DOCKER_CREDENTIALS, url: 'https://index.docker.io/v1/']) {
        //             script {
        //                 dockerImage.push("latest")
        //             }
        //         }
        //     }
        // }

        stage('Configure AWS CLI') {
            steps {
                echo 'This is a debug message #2'
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
                accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']])
             {
                   echo 'This is a debug message #3'
                    sh "aws configure set region ${env.AWS_REGION}"
                    sh "aws eks update-kubeconfig --region ${env.AWS_REGION} --name ${env.EKS_CLUSTER_NAME}"
                echo 'This is a debug message #4'
                sh "aws sts get-caller-identity"
             }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'kube_config', variable: 'KUBECONFIG')]) {
   
                    sh "kubectl get nodes --v=8"         //
                    sh "kubectl apply -f terraform/eks_cluster/k8s/deployment.yaml --v=8"
                    sh "kubectl apply -f terraform/eks_cluster/k8s/service.yaml --v=8"
                    
                    }
                }
            }
        }
}

    post {
        success {
            echo 'WOW!! Deployment successful!!'
        }
        failure {
            echo 'Sorry, the deployment failed. Check logs for details.'
        }
    }
}
  