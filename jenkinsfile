pipeline
{
    agent any

    environment {
        AWS_REGION = 'us-east-1' // e.g., us-east-1
        EKS_CLUSTER_NAME = 'my-terra-cluster'
        DOCKER_IMAGE_NAME = 'shashkist/flask-contacts-app'
        REPO_URL = 'https://github.com/glazedonuts616/MajorProject.git' // e.g., https://github.com/your-org/your-repo.git
    }

    stages {
        
        stage ('Clone Github Repository'){
            steps{
               git branch: 'main', credentialsId: 'github', url: 'https://github.com/glazedonuts616/MajorProject.git'
               echo 'This is a debug message #1'
            }
        }
        // stage('Build Docker Image') {
        //     steps {
        //         script {
        //             dockerImage = docker.build(env.DOCKER_IMAGE_NAME)
        //         }
        //     }
        // }

        // stage('Push Docker Image') {
        //     steps {
        //         withDockerRegistry([credentialsId: env.DOCKER_CREDENTIALS, url: 'https://index.docker.io/v1/']) {
        //             script {
        //                 dockerImage.push("latest")
        //             }
        //         }
        //     }
        // }

        stage('Configure AWS CLI') {
            steps {
                echo 'This is a debug message #2'
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
                accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']])
             {
                   echo 'This is a debug message #3'
                    sh "aws configure set region ${env.AWS_REGION}"
                    sh "aws eks update-kubeconfig --region ${env.AWS_REGION} --name ${env.EKS_CLUSTER_NAME}"
                echo 'This is a debug message #4'
                sh "aws sts get-caller-identity"
             }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'kubectl-eks-credentials', variable: 'kubectl-cred')]) {
    // some block
    kubeconfig(credentialsId: 'kubectl-eks-credentials2', serverUrl: 'https://EA659BCAD43F406DAACE30E91A621903.gr7.us-east-1.eks.amazonaws.com') {
                    
                        // some block
    //                 withKubeConfig(caCertificate: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lJVjUxQVhKbTJZY2t3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TkRFeU1qa3lNREUzTWpaYUZ3MHpOREV5TWpjeU1ESXlNalphTUJVeApFekFSQmdOVkJBTVRDbXQxWW1WeWJtVjBaWE13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUURHYjluamhmL3JubnlkcE1jbEZ3ekduempaRTVmRUwyZ1BMVzBYSGg2QkRqNEwzNVh4VFExa1ZSU0cKRHlwaHl0ZkFWOHd4UDFHOFVVdjNhY044aUdTWlN6TkJYM2F2VjRJV1BGQlgxTmxJeGxTcWZrZ3NWekgrVm1IbgpoVDFRQ0VVNWNLLzFmVmFOWWJEQWlTUEJ6ejRlRXAwSFRyTVVmbWtQL2lFaXdzYWN2L09mTHRhZHlDcy9Fakd2CnUvNDlrK1B4bHNIdmo5TWVHRjlVY2Fha3VMT1ZjM2hmL3NPaGNELytaOW5lOUxRa2wzQ1RVaVo0cUJNNXZzbVUKY0h3WC8zckI5RXVMN1R4RmRYUkNjTzNQcHVOOE41MWg5c2M4cGhJSEhGSVVNcXJyY1FLa0JKWHQyVFJkaWJaZwp3S0NHemJlcWwvanFmRXJhUUtVUHdxN0ZQNG1oQWdNQkFBR2pXVEJYTUE0R0ExVWREd0VCL3dRRUF3SUNwREFQCkJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJSVnQzUG9nSWtUUndGOWcwdFZJWUZaKzJlMHZUQVYKQmdOVkhSRUVEakFNZ2dwcmRXSmxjbTVsZEdWek1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ0xJNWRpbDR6cgpQanVod3NyNTRvUzB5eFZ5OWdYN09hbU5GZ3RYYTJjM0lXanVpYk5PSWRVTFkvUFpOamZ3b0RJK3lwQVQ2OVBZCk5DT2s5bkdUK256WXZqUzBIN2tDdXYyaXJWWCs4V2FLRy9naVdtbHY4SW1wWkhQZDJkSmRoT3Z6MmNYZzVVSEYKNWsyeTlHeUZRR29qSU1RNTdJMnkwM29id2lxMVNUQ3dWaWtWMHZOQnAxZTRpNkhjbUN4eTdNaytWUk03cTRGOQpNTmcxYWh2WSt3elF2aWVTT1VFTVl2NUV4RGFKa0ZkTzlUajNyRXdZc1J0TytseHNrMGN0NjNPRHgvQmR4RWJ4CnJnUzNWdDVFOW1MQUpXWEJhb3NySGZFbTVCR3NUcE1VWlRDQ2E5SUJPNklNU29RRG9sb0s5L0dvWWgyT3h6NGoKY0JtRlBWdVBrTXNnCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K', clusterName: 'my-terra-cluster', contextName: '', credentialsId: 'my-cluster', namespace: '', restrictKubeConfigAccess: false, serverUrl: 'https://0DA1E5A2D560AE0CB66D50D4D5987493.gr7.us-east-1.eks.amazonaws.com') {
    // // some block
    sh "kubectl config view"
    sh "kubectl cluster-info"

                    sh "kubectl get nodes --v=8"
            //        sh "kubectl get nodes"
                    sh "kubectl apply -f terraform/eks_cluster/k8s/deployment.yaml --v=8"
                    sh "kubectl apply -f terraform/eks_cluster/k8s/service.yaml --v=8"
                    
                    }
                }
            }
            }
        }
}

    post {
        success {
            echo 'WOW!! Deployment successful!!'
        }
        failure {
            echo 'Sorry, the deployment failed. Check logs for details.'
        }
    }
}
  